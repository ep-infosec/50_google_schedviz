BEGIN {
  // To keep rows shorter, log the trace start timestamp and compute subsequent
  // timestamps as offsets from that start.
	@start = nsecs;
	printf("ST:0:%x\n", @start);
}

// @cmd tracks which PIDs have already had their command and priority logged.
// eBPF maps are of limited size, so infrequently-seen threads may be logged
// multiple times.

// On switch, log any threads seen for the first time, as well as the switch's
// information.
tracepoint:sched:sched_switch {
	if (@cmds[args->prev_pid] == 0) {
		printf("P:%x:%x:%x:%s\n", nsecs-@start, args->prev_pid, args->prev_prio, args->prev_comm);
		@cmds[args->prev_pid] = 1;
	}
	if (@cmds[args->next_pid] == 0) {
		printf("P:%x:%x:%x:%s\n", nsecs-@start, args->next_pid, args->next_prio, args->next_comm);
		@cmds[args->next_pid] = 1;
	}
	printf("S:%x:%x:%x:%x:%x\n", nsecs-@start, cpu, args->prev_pid, args->prev_state, args->next_pid);
}

// On a migrate, log the thread if seen for the first time, as well as the
// migrate's information.
tracepoint:sched:sched_migrate_task {
	if (@cmds[args->pid] == 0) {
		printf("P:%x:%x:%x:%s\n", nsecs-@start, args->pid, args->prio, args->comm);
		@cmds[args->pid] = 1;
	}
	printf("M:%x:%x:%x:%x:%x\n", nsecs-@start, cpu, args->orig_cpu, args->dest_cpu, args->pid);
}

// On a wakeup, log the thread if seen for the first time, as well as the
// wakeup's information.
tracepoint:sched:sched_wakeup {
	if (@cmds[args->pid] == 0) {
		printf("P:%x:%x:%x:%s\n", nsecs-@start, args->pid, args->prio, args->comm);
		@cmds[args->pid] = 1;
	}
	printf("W:%x:%x:%x:%x\n", nsecs-@start, cpu, args->target_cpu, args->pid);
}

// On a wakeup-new, log the thread as well as the wakeup-new's information.
tracepoint:sched:sched_wakeup_new {
  // Force an update for any cached value for this PID.
	printf("P:%x:%x:%x:%s\n", nsecs-@start, args->pid, args->prio, args->comm);
	@cmds[args->pid] = 1;
	printf("W:%x:%x:%x:%x\n", nsecs-@start, cpu, args->target_cpu, args->pid);
}

END {
	clear(@cmds);
}
